# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: null

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Tag – Get Latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: tag
        uses: jossef/action-latest-release-info@v1.1.0

      - name: Tag – Version Extract
        id: version
        run: |-
          $Version = '${{ steps.tag.outputs.tag_name }}'.Substring(1)
          $VersionElements = $Version.Split('.')
          Write-Output -InputObject "::set-output name=major::$($VersionElements[0])"
          Write-Output -InputObject "::set-output name=minor::$($VersionElements[1])"
          Write-Output -InputObject "::set-output name=patch::$($VersionElements[2])"

      - name: Tag – Version Replace in vss-extension.json
        run: |-
          $FileContent = Get-Content -Path 'PipelinesTasks/PRMetricsV1/vss-extension.json' -Raw
          $FileContent = $FileContent -replace '%MAJOR%', '${{ steps.version.outputs.major }}'
          $FileContent = $FileContent -replace '%MINOR%', '${{ steps.version.outputs.minor }}'
          $FileContent = $FileContent -replace '%PATCH%', '${{ steps.version.outputs.patch }}'
          Set-Content -NoNewline -Path 'PipelinesTasks/PRMetricsV1/vss-extension.json' -Value $FileContent

      - name: Tag – Version Replace in task.json
        run: |-
          $FileContent = Get-Content -Path 'PipelinesTasks/PRMetricsV1/task/task.json' -Raw
          $FileContent = $FileContent -replace '%MAJOR%', '${{ steps.version.outputs.major }}'
          $FileContent = $FileContent -replace '%MINOR%', '${{ steps.version.outputs.minor }}'
          $FileContent = $FileContent -replace '%PATCH%', '${{ steps.version.outputs.patch }}'
          Set-Content -NoNewline -Path 'PipelinesTasks/PRMetricsV1/task/task.json' -Value $FileContent

      - name: MSBuild – Install
        uses: microsoft/setup-msbuild@v1.0.2

      - name: MSBuild – Run
        run: msbuild

      - name: PowerShell Tests – Install
        run: Install-Module -Name 'Pester' -Force

      - name: PowerShell Tests – Run
        run: |-
          $Result = Invoke-Pester -PassThru
          if ($Result.FailedCount -gt 0) { Throw 'PowerShell Tests failed.' }
          exit 0

      - name: Install TFX CLI
        run: npm install -g tfx-cli

      - name: PRMetrics Package – Create
        run: |-
          Set-Location -Path '${{ github.workspace }}/Release/PipelinesTasks/PRMetricsV1'
          tfx extension create --manifest-globs vss-extension.json --output-path ms-omex.prmetrics.vsix

      - name: Upload VSIX
        uses: actions/upload-artifact@v2
        with:
          name: VSIX
          path: '**/*.vsix'

  test-validate:
    name: Test & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Tag – Get Latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: tag
        uses: jossef/action-latest-release-info@v1.1.0

      - name: Tag – Version Extract
        id: version
        run: |-
          $Version = '${{ steps.tag.outputs.tag_name }}'.Substring(1)
          $VersionElements = $Version.Split('.')
          Write-Output -InputObject "::set-output name=major::$($VersionElements[0])"
          Write-Output -InputObject "::set-output name=minor::$($VersionElements[1])"
          Write-Output -InputObject "::set-output name=patch::$($VersionElements[2])"

      - name: Tag – Version Replace in vss-extension.json
        run: |-
          $FileContent = Get-Content -Path 'PipelinesTasks/PRMetricsV1/vss-extension.json' -Raw
          $FileContent = $FileContent -replace '%MAJOR%', '${{ steps.version.outputs.major }}'
          $FileContent = $FileContent -replace '%MINOR%', '${{ steps.version.outputs.minor }}'
          $FileContent = $FileContent -replace '%PATCH%', '${{ steps.version.outputs.patch }}'
          Set-Content -NoNewline -Path 'PipelinesTasks/PRMetricsV1/vss-extension.json' -Value $FileContent

      - name: Tag – Version Replace in task.json
        run: |-
          $FileContent = Get-Content -Path 'PipelinesTasks/PRMetricsV1/task/task.json' -Raw
          $FileContent = $FileContent -replace '%MAJOR%', '${{ steps.version.outputs.major }}'
          $FileContent = $FileContent -replace '%MINOR%', '${{ steps.version.outputs.minor }}'
          $FileContent = $FileContent -replace '%PATCH%', '${{ steps.version.outputs.patch }}'
          Set-Content -NoNewline -Path 'PipelinesTasks/PRMetricsV1/task/task.json' -Value $FileContent

      - name: PowerShell Analysis – Install
        run: Install-Module -Name 'PSScriptAnalyzer' -Force

      - name: PowerShell Analysis – Run
        run: |-
          $Result = (Invoke-ScriptAnalyzer -Path '.' -Recurse | Where-Object -Property 'RuleName' -ne 'TypeNotFound')
          $Result
          if ($Result.Count -gt 0) { Throw 'PowerShell Analysis failed.' }

      - name: Super Linter
        uses: github/super-linter@v3.15.2
        env:
          EDITORCONFIG_FILE_NAME: ../../.editorconfig
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MARKDOWN_CONFIG_FILE: ../../.markdownlint.json
          VALIDATE_JSCPD: false
          VALIDATE_POWERSHELL: false

      - name: Validate Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: .github/linters/markdown-link-check.json

      - name: Validate .markdownlint.json
        uses: Zingabopp/JsonValidate-Action@v1
        with:
          json-file: .markdownlint.json
          json-schema: https://raw.githubusercontent.com/DavidAnson/markdownlint/main/schema/markdownlint-config-schema.json
          use-draft: draft-07

      - name: Validate task.json – Download tasks.schema.json
        run: Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/microsoft/azure-pipelines-task-lib/master/tasks.schema.json' -OutFile 'tasks.schema.json'

      - name: Validate task.json – Update tasks.schema.json
        run: |-
          $FileContent = Get-Content -Path 'tasks.schema.json' -Raw
          $FileContent = $FileContent -replace 'draft-04', 'draft-07'
          Set-Content -NoNewline -Path 'tasks.schema.json' -Value $FileContent

      - name: Validate task.json
        uses: Zingabopp/JsonValidate-Action@v1
        with:
          json-file: PipelinesTasks/PRMetricsV1/task/task.json
          json-schema: tasks.schema.json
          use-draft: draft-07

      - name: Security Scan – Validate
        uses: ShiftLeftSecurity/scan-action@v1.3.0
        with:
          type: credscan,depscan

      - name: Security Scan – Upload Report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: reports
